---
alwaysApply: true
---

# Code Update Rules 

## üéØ Code Update Commands

### Basic Commands:
- `update code [description]` - Update existing code
- `improve [endpoint/feature]` - Enhance functionality  
- `fix [issue]` - Bug fixes
- `refactor [component]` - Code restructuring

## üìù Standard Update Process

**üö® ENFORCEMENT PROTOCOL (MANDATORY):**
- **MUST RESPOND:** "Starting code update with 4-step process..."
- **MUST SHOW:** Checklist progress for each step
- **MUST CONFIRM:** Each step completion before proceeding
- **CANNOT SKIP:** Any step regardless of update complexity

**CRITICAL STEPS (Must be followed in exact order) (MANDATORY):**

### 1. Analyze Current Code
- ‚úÖ Identify specific functionality to update ‚Üí **CONFIRM COMPLETED**
- ‚úÖ Read all related files (route, controller, service, model, enum, test) for that functionality ‚Üí **CONFIRM COMPLETED**
- ‚úÖ Identify what needs to be changed ‚Üí **CONFIRM COMPLETED**
- **CHECKPOINT:** Current state fully understood
- ‚úÖ **ASK USER CONFIRMATION:** "Ready to proceed to Step 2: Make Changes?" ‚Üí **WAIT FOR USER APPROVAL**

### 2. Make Changes
- ‚úÖ **CREATE BACKUP FILES FIRST:** Create .backup copy of each file before modification ‚Üí **CONFIRM COMPLETED**
- ‚úÖ Determine which files need changes based on step 1 analysis ‚Üí **CONFIRM COMPLETED**
- ‚úÖ List specific files to be modified with reasons ‚Üí **CONFIRM COMPLETED**
- ‚úÖ Update model files if needed (add/modify fields, associations, validations) ‚Üí **CONFIRM COMPLETED**
- ‚úÖ Update enum files if needed (add new values, modify existing) ‚Üí **CONFIRM COMPLETED**
- ‚úÖ Update service files if needed (modify business logic, add new methods) ‚Üí **CONFIRM COMPLETED**
- ‚úÖ Update controller files if needed (modify endpoints, add validation, error handling) ‚Üí **CONFIRM COMPLETED**
- ‚úÖ Update route files if needed (add/modify routes, middleware) ‚Üí **CONFIRM COMPLETED**
- ‚úÖ Follow existing code patterns and conventions throughout ‚Üí **CONFIRM COMPLETED**
- ‚úÖ Ensure backward compatibility when possible ‚Üí **CONFIRM COMPLETED**
- **CHECKPOINT:** Only necessary changes implemented following proper dependency order
- ‚úÖ **ASK USER SATISFACTION:** "Are you satisfied with these changes? (Yes/No/Need modifications)" ‚Üí **WAIT FOR USER RESPONSE**
- ‚úÖ **IF NOT SATISFIED:** Continue making modifications based on user feedback ‚Üí **REPEAT UNTIL SATISFIED**
- ‚úÖ **TRACK MODIFICATION COUNT:** Keep count of modification attempts ‚Üí **CONFIRM COMPLETED**
- ‚úÖ **ASK USER CONFIRMATION:** "Ready to proceed to Step 3: Test Changes?" ‚Üí **WAIT FOR USER APPROVAL**

### 3. Test Changes
- ‚úÖ Run existing tests to ensure no regressions ‚Üí **CONFIRM COMPLETED**
- ‚úÖ Add new tests for new functionality ‚Üí **CONFIRM COMPLETED**
- ‚úÖ Verify the changes work as expected ‚Üí **CONFIRM COMPLETED**
- **CHECKPOINT:** All testing validated
- ‚úÖ **ASK USER CONFIRMATION:** "Ready to proceed to Step 4: Document Changes?" ‚Üí **WAIT FOR USER APPROVAL**

### 4. Document Changes
- ‚úÖ Update comments and documentation if needed ‚Üí **CONFIRM COMPLETED**
- ‚úÖ Keep track of what was modified ‚Üí **CONFIRM COMPLETED**
- **CHECKPOINT:** Documentation updated and complete

## üîÑ ITERATIVE MODIFICATION PROTOCOL

### PHASE 1: BACKUP CREATION (MANDATORY)
- ‚úÖ Before ANY file modification, create backup with .backup extension ‚Üí **CONFIRM COMPLETED**
- ‚úÖ Example: `OrderController.js` becomes `OrderController.js.backup` ‚Üí **CONFIRM COMPLETED**
- ‚úÖ Track all backup files created ‚Üí **CONFIRM COMPLETED**

### PHASE 2: MODIFICATION CYCLE
- ‚úÖ Make requested code changes ‚Üí **CONFIRM COMPLETED**
- ‚úÖ Increment modification counter (start from 1) ‚Üí **CONFIRM COMPLETED**
- ‚úÖ **MANDATORY ASK:** "Are you satisfied with these changes? (Yes/Continue modifying)" ‚Üí **WAIT FOR USER RESPONSE**
- ‚úÖ **IF Continue:** Go back to modification step ‚Üí **REPEAT CYCLE**
- ‚úÖ **IF Yes:** Proceed to next step in main workflow ‚Üí **CONTINUE**

### PHASE 3: 5-ATTEMPT CHECKPOINT (AUTOMATIC)
- ‚úÖ **WHEN COUNTER = 5, 10, 15, 20...** MANDATORY show this exact message:
  ```
  üö® MODIFICATION CHECKPOINT (Attempt #X)
  
  You've requested X modifications. Choose an option:
  
  1. üîÑ RESTORE - Return all files to original state (.backup)
  2. ‚úÖ CONTINUE - Keep current changes and continue modifying
  
  Type "1" for RESTORE or "2" for CONTINUE:
  ```
- ‚úÖ **WAIT FOR USER CHOICE** (1 or 2) ‚Üí **MANDATORY USER INPUT**
- ‚úÖ **IF Choice = 1:** Execute restore protocol ‚Üí **RESTORE ALL FILES FROM .backup**
- ‚úÖ **IF Choice = 2:** Reset counter to 0, continue modifications ‚Üí **CONTINUE CYCLE**

### PHASE 4: RESTORE PROTOCOL (IF TRIGGERED)
- ‚úÖ Read each .backup file ‚Üí **CONFIRM COMPLETED**
- ‚úÖ Copy .backup content to original file ‚Üí **CONFIRM COMPLETED**
- ‚úÖ Verify restoration successful ‚Üí **CONFIRM COMPLETED**
- ‚úÖ **CONFIRM TO USER:** "All files restored to original state" ‚Üí **CONFIRM COMPLETED**
- ‚úÖ **ASK:** "Ready to start fresh modifications?" ‚Üí **WAIT FOR USER RESPONSE**

## üîÑ Simple Update Template

When making code updates, use this approach:

```
**WHAT CHANGED:**
- [Brief description of changes made]

**FILES MODIFIED:**
- [List of files that were updated]

**TESTING:**
- [What tests were run or added]

**NOTES:**
- [Any important details or considerations]
```

## ‚ö†Ô∏è CRITICAL COMPLIANCE RULES
- **Literal interpretation** - NO creative additions
- **Business rules must be applied** from project documentation
- **Follow existing patterns** for implementation
- **CANNOT SKIP STEPS** - Each step must show completion confirmation
- **CANNOT ASSUME** - Must verify with source files and quote exact findings
- **CANNOT PROCEED** - Without completing verification report
- **MUST SHOW PROGRESS** - Checklist completion for each step

## üõ°Ô∏è FAILURE SAFEGUARDS
- **If skipping step detected** ‚Üí STOP and restart from step 1
- **If assumption detected** ‚Üí STOP and verify with source files
- **If verification incomplete** ‚Üí CANNOT proceed to implementation
- **If error occurs** ‚Üí Systematic debugging protocol (one error at a time)

## üö® Important Rules
- Always read existing code before making changes
- Follow the project's existing patterns and conventions
- Test your changes before considering them complete
- Keep updates focused and avoid unnecessary changes
- Document significant modifications
- Create backups before any file modification
- Wait for user confirmation at each checkpoint

---

**Version:** Code Update Rules v1.0
**Purpose:** Systematic code update guidance with mandatory verification steps# Code Update Rules - Based on CLAUDE_UPDATE_RULES.md

## üéØ Code Update Commands

### Basic Commands:
- `update code [description]` - Update existing code
- `improve [endpoint/feature]` - Enhance functionality  
- `fix [issue]` - Bug fixes
- `refactor [component]` - Code restructuring

## üìù Standard Update Process

**üö® ENFORCEMENT PROTOCOL (MANDATORY):**
- **MUST RESPOND:** "Starting code update with 4-step process..."
- **MUST SHOW:** Checklist progress for each step
- **MUST CONFIRM:** Each step completion before proceeding
- **CANNOT SKIP:** Any step regardless of update complexity

**CRITICAL STEPS (Must be followed in exact order) (MANDATORY):**

### 1. Analyze Current Code
- ‚úÖ Identify specific functionality to update ‚Üí **CONFIRM COMPLETED**
- ‚úÖ Read all related files (route, controller, service, model, enum, test) for that functionality ‚Üí **CONFIRM COMPLETED**
- ‚úÖ Identify what needs to be changed ‚Üí **CONFIRM COMPLETED**
- **CHECKPOINT:** Current state fully understood
- ‚úÖ **ASK USER CONFIRMATION:** "Ready to proceed to Step 2: Make Changes?" ‚Üí **WAIT FOR USER APPROVAL**

### 2. Make Changes
- ‚úÖ **CREATE BACKUP FILES FIRST:** Create .backup copy of each file before modification ‚Üí **CONFIRM COMPLETED**
- ‚úÖ Determine which files need changes based on step 1 analysis ‚Üí **CONFIRM COMPLETED**
- ‚úÖ List specific files to be modified with reasons ‚Üí **CONFIRM COMPLETED**
- ‚úÖ Update model files if needed (add/modify fields, associations, validations) ‚Üí **CONFIRM COMPLETED**
- ‚úÖ Update enum files if needed (add new values, modify existing) ‚Üí **CONFIRM COMPLETED**
- ‚úÖ Update service files if needed (modify business logic, add new methods) ‚Üí **CONFIRM COMPLETED**
- ‚úÖ Update controller files if needed (modify endpoints, add validation, error handling) ‚Üí **CONFIRM COMPLETED**
- ‚úÖ Update route files if needed (add/modify routes, middleware) ‚Üí **CONFIRM COMPLETED**
- ‚úÖ Follow existing code patterns and conventions throughout ‚Üí **CONFIRM COMPLETED**
- ‚úÖ Ensure backward compatibility when possible ‚Üí **CONFIRM COMPLETED**
- **CHECKPOINT:** Only necessary changes implemented following proper dependency order
- ‚úÖ **ASK USER SATISFACTION:** "Are you satisfied with these changes? (Yes/No/Need modifications)" ‚Üí **WAIT FOR USER RESPONSE**
- ‚úÖ **IF NOT SATISFIED:** Continue making modifications based on user feedback ‚Üí **REPEAT UNTIL SATISFIED**
- ‚úÖ **TRACK MODIFICATION COUNT:** Keep count of modification attempts ‚Üí **CONFIRM COMPLETED**
- ‚úÖ **ASK USER CONFIRMATION:** "Ready to proceed to Step 3: Test Changes?" ‚Üí **WAIT FOR USER APPROVAL**

### 3. Test Changes
- ‚úÖ Run existing tests to ensure no regressions ‚Üí **CONFIRM COMPLETED**
- ‚úÖ Add new tests for new functionality ‚Üí **CONFIRM COMPLETED**
- ‚úÖ Verify the changes work as expected ‚Üí **CONFIRM COMPLETED**
- **CHECKPOINT:** All testing validated
- ‚úÖ **ASK USER CONFIRMATION:** "Ready to proceed to Step 4: Document Changes?" ‚Üí **WAIT FOR USER APPROVAL**

### 4. Document Changes
- ‚úÖ Update comments and documentation if needed ‚Üí **CONFIRM COMPLETED**
- ‚úÖ Keep track of what was modified ‚Üí **CONFIRM COMPLETED**
- **CHECKPOINT:** Documentation updated and complete

## üîÑ ITERATIVE MODIFICATION PROTOCOL

### PHASE 1: BACKUP CREATION (MANDATORY)
- ‚úÖ Before ANY file modification, create backup with .backup extension ‚Üí **CONFIRM COMPLETED**
- ‚úÖ Example: `OrderController.js` becomes `OrderController.js.backup` ‚Üí **CONFIRM COMPLETED**
- ‚úÖ Track all backup files created ‚Üí **CONFIRM COMPLETED**

### PHASE 2: MODIFICATION CYCLE
- ‚úÖ Make requested code changes ‚Üí **CONFIRM COMPLETED**
- ‚úÖ Increment modification counter (start from 1) ‚Üí **CONFIRM COMPLETED**
- ‚úÖ **MANDATORY ASK:** "Are you satisfied with these changes? (Yes/Continue modifying)" ‚Üí **WAIT FOR USER RESPONSE**
- ‚úÖ **IF Continue:** Go back to modification step ‚Üí **REPEAT CYCLE**
- ‚úÖ **IF Yes:** Proceed to next step in main workflow ‚Üí **CONTINUE**

### PHASE 3: 5-ATTEMPT CHECKPOINT (AUTOMATIC)
- ‚úÖ **WHEN COUNTER = 5, 10, 15, 20...** MANDATORY show this exact message:
  ```
  üö® MODIFICATION CHECKPOINT (Attempt #X)
  
  You've requested X modifications. Choose an option:
  
  1. üîÑ RESTORE - Return all files to original state (.backup)
  2. ‚úÖ CONTINUE - Keep current changes and continue modifying
  
  Type "1" for RESTORE or "2" for CONTINUE:
  ```
- ‚úÖ **WAIT FOR USER CHOICE** (1 or 2) ‚Üí **MANDATORY USER INPUT**
- ‚úÖ **IF Choice = 1:** Execute restore protocol ‚Üí **RESTORE ALL FILES FROM .backup**
- ‚úÖ **IF Choice = 2:** Reset counter to 0, continue modifications ‚Üí **CONTINUE CYCLE**

### PHASE 4: RESTORE PROTOCOL (IF TRIGGERED)
- ‚úÖ Read each .backup file ‚Üí **CONFIRM COMPLETED**
- ‚úÖ Copy .backup content to original file ‚Üí **CONFIRM COMPLETED**
- ‚úÖ Verify restoration successful ‚Üí **CONFIRM COMPLETED**
- ‚úÖ **CONFIRM TO USER:** "All files restored to original state" ‚Üí **CONFIRM COMPLETED**
- ‚úÖ **ASK:** "Ready to start fresh modifications?" ‚Üí **WAIT FOR USER RESPONSE**

## üîÑ Simple Update Template

When making code updates, use this approach:

```
**WHAT CHANGED:**
- [Brief description of changes made]

**FILES MODIFIED:**
- [List of files that were updated]

**TESTING:**
- [What tests were run or added]

**NOTES:**
- [Any important details or considerations]
```

## ‚ö†Ô∏è CRITICAL COMPLIANCE RULES
- **Literal interpretation** - NO creative additions
- **Business rules must be applied** from project documentation
- **Follow existing patterns** for implementation
- **CANNOT SKIP STEPS** - Each step must show completion confirmation
- **CANNOT ASSUME** - Must verify with source files and quote exact findings
- **CANNOT PROCEED** - Without completing verification report
- **MUST SHOW PROGRESS** - Checklist completion for each step

## üõ°Ô∏è FAILURE SAFEGUARDS
- **If skipping step detected** ‚Üí STOP and restart from step 1
- **If assumption detected** ‚Üí STOP and verify with source files
- **If verification incomplete** ‚Üí CANNOT proceed to implementation
- **If error occurs** ‚Üí Systematic debugging protocol (one error at a time)

## üö® Important Rules
- Always read existing code before making changes
- Follow the project's existing patterns and conventions
- Test your changes before considering them complete
- Keep updates focused and avoid unnecessary changes
- Document significant modifications
- Create backups before any file modification
- Wait for user confirmation at each checkpoint

---

**Version:** Code Update Rules v1.0
**Purpose:** Systematic code update guidance with mandatory verification steps