---
description: AI Memory & Development Context
globs: ["**/*"]
alwaysApply: true
---

# ü§ñ CURSOR AI MEMORY & DEVELOPMENT CONTEXT

**Version:** 1.0  
**Last Updated:** December 2024  
**Purpose:** Comprehensive AI context and memory system for Cursor IDE

---

## üéØ **AI BEHAVIOR INSTRUCTIONS**

### **CRITICAL DIRECTIVES:**

1. **MEMORY FIRST:** Always read and understand `project_memory.md` before any development work
2. **SYSTEMATIC APPROACH:** Follow the comprehensive SOP system in rules
3. **SESSION RECOVERY:** Check for `session_state.json` to continue interrupted work
4. **QUALITY GATES:** Never declare work complete without comprehensive testing
5. **DOCUMENTATION:** Always update project memory after completing tasks

### **DEVELOPMENT WORKFLOW:**

```markdown
BEFORE EVERY TASK:
1. Read project_memory.md for current context
2. Check session_state.json if present
3. Understand active vs deprecated files
4. Confirm understanding with user

DURING DEVELOPMENT:
1. Track progress in real-time
2. Document issues immediately
3. Create checkpoints for long processes
4. Follow established patterns and conventions

AFTER COMPLETION:
1. Run comprehensive tests (unit + integration + frontend)
2. Update project_memory.md with lessons learned
3. Clean up temporary files
4. Save session state if needed
```

---

## üìã **PROJECT CONTEXT LOADING**

### **ALWAYS READ THESE FILES FIRST:**
- `project_memory.md` - Current project state and history
- `session_state.json` - Recovery state (if exists)

### **FILE ORGANIZATION UNDERSTANDING:**
- `src/` - Main implementation files (CURRENT)
- `test/` - Testing files (PERMANENT)
- `docs/` - Documentation (PERMANENT)
- `temp/` - Temporary files (SAFE TO DELETE)
- `archive/` - Deprecated files (REFERENCE ONLY)

---

## üß™ **MANDATORY TESTING REQUIREMENTS**

### **NEVER SKIP THESE TESTS:**

#### **WHITEBOX TESTING:**
- [ ] Unit tests for all functions
- [ ] Integration tests for components
- [ ] Code coverage > 80%
- [ ] Performance benchmarks

#### **BLACKBOX TESTING:**
- [ ] Functional requirements validation
- [ ] Input/output validation
- [ ] Error handling scenarios
- [ ] End-to-end workflows

#### **FRONTEND TESTING:**
- [ ] Cross-browser compatibility
- [ ] Responsive design validation
- [ ] User interaction flows
- [ ] Accessibility compliance

### **DEPLOYMENT BLOCKERS:**
- ‚ùå Any test failure
- ‚ùå Performance degradation
- ‚ùå New errors in logs
- ‚ùå User workflow breaks
- ‚ùå Security vulnerabilities

---

## üí¨ **CHAT CONTEXT MANAGEMENT**

### **EXPECTED CHAT STARTERS:**

#### **FULL CONTEXT LOAD:**
```
[PROJECT_NAME] Development Session

CONTEXT LOADING:
1. Read project_memory.md for current status
2. Read session_state.json if exists
3. Review ai_comprehensive_sop_system.md protocols

TASK: [DESCRIBE TASK]

IMPORTANT: Confirm understanding before proceeding.
```

---

## üö® **CRITICAL ANTI-PATTERNS TO AVOID**

### **NEVER DO:**
- ‚ùå Skip reading project_memory.md
- ‚ùå Declare project ready without testing
- ‚ùå Ignore frontend validation
- ‚ùå Skip memory updates after completion
- ‚ùå Assume AI remembers previous context
- ‚ùå Delete files without marking deprecated
- ‚ùå Deploy without running all test suites

### **ALWAYS DO:**
- ‚úÖ Load project context first
- ‚úÖ Follow systematic testing approach
- ‚úÖ Document everything in real-time
- ‚úÖ Update memory after each session
- ‚úÖ Verify user understanding
- ‚úÖ Maintain quality gates

---

## üîß **DEVELOPMENT TOOLS INTEGRATION**

### **CURSOR IDE FEATURES TO LEVERAGE:**
- AI-powered code completion
- Intelligent code suggestions
- Real-time error detection
- Integrated testing support
- Version control integration

### **RECOMMENDED WORKFLOW:**
1. Use AI assistance for code generation
2. Validate with comprehensive testing
3. Review and refactor for quality
4. Document changes in memory system
5. Commit with meaningful messages

---

## üìû **QUICK REFERENCE**

### **FILES TO ALWAYS CHECK:**
- `project_memory.md` - Project context
- `ai_comprehensive_sop_system.md` - Development protocols
- `session_state.json` - Recovery state

### **TESTING COMMAND REFERENCE:**
```bash
# Run all tests before declaring complete
npm test                 # or appropriate test command
npm run lint            # code quality
npm run typecheck       # type validation
npm run build           # build verification
```

### **EMERGENCY RECOVERY:**
1. Check session_state.json
2. Identify last checkpoint
3. Use recovery templates
4. Validate before continuing